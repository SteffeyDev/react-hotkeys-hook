{"version":3,"file":"react-hotkeys-hook.cjs.production.min.js","sources":["../src/useHotkeys.ts","../src/useHotkeyScope.ts","../src/useIsHotkeyPressed.ts"],"sourcesContent":["import hotkeys, { HotkeysEvent, KeyHandler } from 'hotkeys-js';\nimport React, { useCallback, useEffect, useRef } from 'react';\n\n// Pass through all events, we'll handle filtering if needed\nhotkeys.filter = () => true;\n\ntype AvailableTags = 'INPUT' | 'TEXTAREA' | 'SELECT';\n\nexport type Options = {\n  filter?: typeof hotkeys.filter;\n  enableOnTags?: AvailableTags[];\n  splitKey?: string;\n  scope?: string;\n  keyup?: boolean;\n  keydown?: boolean;\n};\n\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, options?: Options): React.MutableRefObject<T | null>;\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, deps?: any[]): React.MutableRefObject<T | null>;\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, options?: Options, deps?: any[]): React.MutableRefObject<T | null>;\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, options?: any[] | Options, deps?: any[]): React.MutableRefObject<T | null> {\n  if (options instanceof Array) {\n    deps = options;\n    options = undefined;\n  }\n\n  // If they have loaded a custom scope using useHotkeyScope,\n  // then restrict this hotkey to that scope\n  if (!options?.scope && hotkeys.getScope() !== 'all') {\n    options = {\n      ...options,\n      scope: hotkeys.getScope()\n    };\n  }\n\n  const { enableOnTags, filter, keyup, keydown } = options || {};\n  const ref = useRef<T | null>(null);\n\n  // Always filter out events on these three tags, unless the enableOnTags prop says otherwise\n  const blockTags = (['INPUT', 'TEXTAREA', 'SELECT'] as AvailableTags[])\n    .filter(tag => !enableOnTags || !enableOnTags.includes(tag));\n\n  const memoisedCallback = useCallback((keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => {\n    // If we have a filter, then exit early if the event does not match\n    if (filter && !filter(keyboardEvent)) return false;\n\n    // Otherwise, if no filter, check if the event is on a tag that we want to ignore\n    const targetTagName: string | undefined =\n      (keyboardEvent.target as HTMLElement)?.tagName ||\n      (keyboardEvent.srcElement as HTMLElement)?.tagName;\n    if (!filter && targetTagName && blockTags.includes(targetTagName as AvailableTags)) return false;\n\n    // If we have a valid ref, and that ref is not the active element, then exit\n    if (ref.current && document.activeElement !== ref.current) return false;\n\n    callback(keyboardEvent, hotkeysEvent);\n    return true;\n  }, deps ? [ref, ...deps] : [ref]);\n\n  useEffect(() => {\n    if (keyup && keydown !== true) {\n      (options as Options).keydown = false;\n    }\n\n    hotkeys(keys, (options as Options) || {}, memoisedCallback);\n\n    return () => hotkeys.unbind(keys, memoisedCallback);\n  }, [memoisedCallback, options, enableOnTags, filter, keys]);\n\n  return ref;\n}\n","import React, { useEffect } from 'react';\nimport hotkeys from 'hotkeys-js';\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nexport function useHotkeyScope(scope?: string, setOnMount?: boolean): { enableScope: () => void, disableScope: () => void } {\n  const actualScope: string = scope ?? uuidv4();\n  useEffect(() => {\n    if (setOnMount) hotkeys.setScope(actualScope);\n    return () => hotkeys.deleteScope(actualScope);\n  }, []);\n  return {\n    enableScope: () => hotkeys.setScope(actualScope),\n    disableScope: () => hotkeys.deleteScope(actualScope)\n  };\n}\n","import hotkeys from 'hotkeys-js';\n\nexport function useIsHotkeyPressed() {\n  return hotkeys.isPressed;\n}"],"names":["hotkeys","filter","scope","setOnMount","actualScope","replace","c","r","Math","random","toString","useEffect","setScope","deleteScope","enableScope","disableScope","keys","callback","options","deps","Array","undefined","_options","getScope","enableOnTags","keyup","keydown","ref","useRef","blockTags","tag","includes","memoisedCallback","useCallback","keyboardEvent","hotkeysEvent","targetTagName","target","tagName","srcElement","_keyboardEvent$srcEle","current","document","activeElement","unbind","isPressed"],"mappings":"gUAIAA,EAAQC,OAAS,kBAAM,mCCMQC,EAAgBC,OACvCC,QAAsBF,EAAAA,EAPrB,uCAAuCG,QAAQ,SAAS,SAASC,OAClEC,EAAoB,GAAhBC,KAAKC,SAAgB,SAAY,KAALH,EAAWC,EAAS,EAAJA,EAAU,GACrDG,SAAS,cAMpBC,aAAU,kBACJR,GAAYH,EAAQY,SAASR,GAC1B,kBAAMJ,EAAQa,YAAYT,MAChC,IACI,CACLU,YAAa,kBAAMd,EAAQY,SAASR,IACpCW,aAAc,kBAAMf,EAAQa,YAAYT,yBDE5C,SAA8CY,EAAcC,EAAsBC,EAA2BC,SACvGD,aAAmBE,QACrBD,EAAOD,EACPA,OAAUG,YAKPH,IAAAI,EAASpB,OAAgC,QAAvBF,EAAQuB,aAC7BL,OACKA,GACHhB,MAAOF,EAAQuB,oBAI8BL,GAAW,GAApDM,IAAAA,aAAcvB,IAAAA,OAAQwB,IAAAA,MAAOC,IAAAA,QAC/BC,EAAMC,SAAiB,MAGvBC,EAAa,CAAC,QAAS,WAAY,UACtC5B,QAAO,SAAA6B,UAAQN,IAAiBA,EAAaO,SAASD,MAEnDE,EAAmBC,eAAY,SAACC,EAA8BC,cAE9DlC,IAAWA,EAAOiC,GAAgB,OAAO,MAGvCE,YACHF,EAAcG,iBAAwBC,oBACtCJ,EAAcK,mBAAdC,EAA0CF,kBACxCrC,GAAUmC,GAAiBP,EAAUE,SAASK,IAG/CT,EAAIc,SAAWC,SAASC,gBAAkBhB,EAAIc,UAElDxB,EAASiB,EAAeC,GACjB,MACNhB,GAAQQ,UAAQR,GAAQ,CAACQ,WAE5BhB,aAAU,kBACJc,IAAqB,IAAZC,IACVR,EAAoBQ,SAAU,GAGjC1B,EAAQgB,EAAOE,GAAuB,GAAIc,GAEnC,kBAAMhC,EAAQ4C,OAAO5B,EAAMgB,MACjC,CAACA,EAAkBd,EAASM,EAAcvB,EAAQe,IAE9CW,gDElEA3B,EAAQ6C"}