{"version":3,"file":"react-hotkeys-hook.cjs.development.js","sources":["../src/useIsHotkeyPressed.ts","../src/useHotkeys.ts","../src/useHotkeyScope.ts"],"sourcesContent":["import hotkeys from 'hotkeys-js';\n\nexport function useIsHotkeyPressed() {\n  return hotkeys.isPressed;\n}","import hotkeys, { HotkeysEvent, KeyHandler } from 'hotkeys-js';\nimport React, { useCallback, useEffect, useRef } from 'react';\n\n// Pass through all events, we'll handle filtering if needed\nhotkeys.filter = () => true;\n\ntype AvailableTags = 'INPUT' | 'TEXTAREA' | 'SELECT';\n\nexport type Options = {\n  filter?: typeof hotkeys.filter;\n  enableOnTags?: AvailableTags[];\n  splitKey?: string;\n  scope?: string;\n  keyup?: boolean;\n  keydown?: boolean;\n  debug?: boolean;\n};\n\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, options?: Options): React.MutableRefObject<T | null>;\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, deps?: any[]): React.MutableRefObject<T | null>;\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, options?: Options, deps?: any[]): React.MutableRefObject<T | null>;\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, options?: any[] | Options, deps?: any[]): React.MutableRefObject<T | null> {\n  if (options instanceof Array) {\n    deps = options;\n    options = undefined;\n  }\n\n  const { enableOnTags, filter, keyup, keydown, debug } = options || {};\n  const ref = useRef<T | null>(null);\n\n  // If they have loaded a custom scope using useHotkeyScope,\n  // then restrict this hotkey to that scope\n  if (!options?.scope && hotkeys.getScope() !== 'all') {\n    if (debug) console.debug(`[useHotkeys] Automatically assigning hotkeys '${keys}' to active scope '${hotkeys.getScope()}'`);\n    options = {\n      ...options,\n      scope: hotkeys.getScope()\n    };\n  }\n\n  // Always filter out events on these three tags, unless the enableOnTags prop says otherwise\n  const blockTags = (['INPUT', 'TEXTAREA', 'SELECT'] as AvailableTags[])\n    .filter(tag => !enableOnTags || !enableOnTags.includes(tag));\n\n  const memoisedCallback = useCallback((keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => {\n    // If we have a filter, then exit early if the event does not match\n    if (filter && !filter(keyboardEvent)) {\n      if (debug) console.debug(`[useHotkeys] Keyboard event with key '${keyboardEvent.key}' ignored due to custom filter`);\n      return false;\n    }\n\n    // Otherwise, if no filter, check if the event is on a tag that we want to ignore\n    const targetTagName: string | undefined =\n      (keyboardEvent.target as HTMLElement)?.tagName ||\n      (keyboardEvent.srcElement as HTMLElement)?.tagName;\n    if (!filter && targetTagName && blockTags.includes(targetTagName as AvailableTags)) {\n      if (debug && targetTagName) console.debug(`[useHotkeys] Keyboard event with key '${keyboardEvent.key}' ignored because event target has tag '${targetTagName}'`);\n      return false;\n    }\n\n    // If we have a valid ref, and that ref is not the active element, then exit\n    if (ref.current && document.activeElement !== ref.current) {\n      if (debug) console.debug(`[useHotkeys] Keyboard event with key '${keyboardEvent.key}' ignored because ref is not the active element`);\n      return false;\n    }\n\n    callback(keyboardEvent, hotkeysEvent);\n    return true;\n  }, deps ? [ref, ...deps] : [ref]);\n\n  useEffect(() => {\n    if (keyup && keydown !== true) {\n      (options as Options).keydown = false;\n    }\n\n    if (debug) console.debug(`[useHotkeys] Creating new key binding for keys '${keys}' with options: '${JSON.stringify(options)}'`);\n    hotkeys(keys, (options as Options) || {}, memoisedCallback);\n\n    return () => hotkeys.unbind(keys, memoisedCallback);\n  }, [memoisedCallback, options, enableOnTags, filter, keys]);\n\n  return ref;\n}\n","import React, { useEffect } from 'react';\nimport hotkeys from 'hotkeys-js';\n\nexport function useHotkeyScope(scope?: string, setOnMount: boolean = true): { enableScope: () => void, disableScope: () => void } {\n  // If they don't provide a scope name, generate a random one\n  // Because useHotkey automatically uses the current scope, they don't actually\n  //  need to know the scope name to use scoped hotkeys\n  const actualScope: string = scope ?? '_' + Math.random().toString(36).substr(2, 9);\n\n  useEffect(() => {\n    // By default, this scope is enabled on mount and disabled on dismount\n    if (setOnMount) hotkeys.setScope(actualScope);\n    return () => hotkeys.deleteScope(actualScope);\n  }, []);\n\n  // Allow them to manually enable (set) and disable (destroy) the scope\n  // This is needed when setOnMount is false, but could be used in other situations as well\n  return {\n    enableScope: () => hotkeys.setScope(actualScope),\n    disableScope: () => hotkeys.deleteScope(actualScope)\n  };\n}\n"],"names":["useIsHotkeyPressed","hotkeys","isPressed","filter","useHotkeys","keys","callback","options","deps","Array","undefined","enableOnTags","keyup","keydown","debug","ref","useRef","scope","getScope","console","blockTags","tag","includes","memoisedCallback","useCallback","keyboardEvent","hotkeysEvent","key","targetTagName","target","tagName","srcElement","current","document","activeElement","useEffect","JSON","stringify","unbind","useHotkeyScope","setOnMount","actualScope","Math","random","toString","substr","setScope","deleteScope","enableScope","disableScope"],"mappings":"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"}